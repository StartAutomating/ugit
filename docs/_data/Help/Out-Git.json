{
  "Synopsis": "Outputs Git to PowerShell",
  "Description": "Outputs Git as PowerShell Objects.\n\nGit Output can be provided by any number of extensions to Out-Git.\n\nExtensions use two attributes to indicate if they should be run:\n\n~~~PowerShell\n[Management.Automation.Cmdlet(\"Out\",\"Git\")] # This signals that this is an extension for Out-Git\n[ValidatePattern(\"RegularExpression\")]      # This is run on $GitCommand to determine if the extension should run.\n~~~",
  "Parameters": [
    {
      "Name": null,
      "Type": null,
      "Description": "",
      "Required": false,
      "Position": 0,
      "Aliases": null,
      "DefaultValue": null,
      "Globbing": false,
      "PipelineInput": null,
      "variableLength": false
    }
  ],
  "Notes": [
    "Out-Git will generate two events upon completion.  They will have the source identifiers of \"Out-Git\" and \"Out-Git $GitArgument\""
  ],
  "CommandType": "Function",
  "Component": [
    null
  ],
  "Inputs": [
    null
  ],
  "Outputs": [
    null
  ],
  "Links": [
    null
  ],
  "Examples": [
    {
      "Title": "EXAMPLE 1",
      "Markdown": "Log entries are returned as objects, with properties and methods.",
      "Code": "git log -n 1 | Get-Member"
    },
    {
      "Title": "EXAMPLE 2",
      "Markdown": "Status entries are converted into objects.",
      "Code": "git status"
    },
    {
      "Title": "EXAMPLE 3",
      "Markdown": "Display untracked files.",
      "Code": "git status | Select-Object -ExpandProperty Untracked"
    },
    {
      "Title": "EXAMPLE 4",
      "Markdown": "Display the list of branches, as objects.",
      "Code": "git branch"
    }
  ]
}